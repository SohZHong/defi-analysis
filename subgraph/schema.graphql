type User @entity {
  id: Bytes!
  totalSupplied: BigInt! # uint256
  totalBorrowed: BigInt! # uint256
  totalRepaid: BigInt! # uint256
  totalWithdrawn: BigInt! # uint256
  totalLiquidated: BigInt! # uint256
  flashLoanCount: Int! # uint8
  transactions: [Transaction!]! @derivedFrom(field: "user")
  useReserveAsCollateral: Boolean!
}

type Transaction @entity(immutable: true, timeseries: true) {
  id: Int8!
  user: User! # relationship with the 'User' entity
  eventType: String!  # "Supply", "Borrow", "Withdraw"
  amount: BigInt!
  reserve: Bytes!
  timestamp: Timestamp!
  transactionHash: Bytes!
}

# Record statistics from daily transactions
type DailyStats @aggregation(intervals: ["day"], source: "Transaction") {
  id: Int8!
  user: User!
  timestamp: Timestamp!
  totalSupplied: BigInt! @aggregate(fn: "sum", arg: "amount _ (eventType = 'Supply' and 1 or 0)")
  totalBorrowed: BigInt! @aggregate(fn: "sum", arg: "amount _ (eventType = 'Borrow' and 1 or 0)")
  totalWithdrawn: BigInt! @aggregate(fn: "sum", arg: "amount _ (eventType = 'Withdraw' and 1 or 0)")
}
